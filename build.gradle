buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.7.0"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
    id 'io.qameta.allure' version '2.6.0'
}

group 'kotlinalluregr'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

def allureVersion = '2.9.0'
def junitVersion = '5.5.0-M1'
def kotlin_version = "1.3.20"

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.0-alpha-2'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile 'org.jetbrains.exposed:exposed:0.13.6'
    //compile ("com.oracle:ojdbc7:12.1.0.2")

    // JUnit5
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testCompile('org.assertj:assertj-core:3.11.1')
    testCompile("org.junit.jupiter:junit-jupiter-params:$junitVersion")

    // Allure
    testRuntimeOnly("io.qameta.allure:allure-junit5:$allureVersion")
    testCompile("io.qameta.allure:allure-java-commons:$allureVersion")
    testCompile("io.qameta.allure:allure-attachments:$allureVersion")
    testCompile("io.qameta.allure:allure-generator:$allureVersion")
    testCompile("io.qameta.allure:allure-httpclient:$allureVersion")
}

test {
    useJUnitPlatform()
    systemProperty 'allure.results.directory', "$projectDir/build/allure-results"
    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
    }
    scanForTestClasses = false
    testLogging.showStandardStreams = true
    dependsOn 'cleanTest'
}

apply plugin: 'io.qameta.allure'

allure {
    autoconfigure = true
    version = '2.9.0'
    clean = true
    reportDir = file("$projectDir/build/allure-report")
    resultsDir = file("$projectDir/build/allure-results")
    downloadLinkFormat = 'https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/%s/allure-commandline-%<s.zip'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
